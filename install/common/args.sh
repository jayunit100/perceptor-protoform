#!/bin/bash
# version="0.1"
#
# This is an optional arguments-only example of Argbash potential
#

# ARG_OPTIONAL_BOOLEAN([kube-perceiver],[k],[Wether the kube perceiver is enabled.],[on])
# ARG_OPTIONAL_BOOLEAN([openshift-perceiver],[o],[Wether the openshift perceiver is enabled.],[off])
#
#
# ARG_OPTIONAL_SINGLE([scanned-registry],[p],[A registry url you will need to pull from if private registries.],[])
# ARG_OPTIONAL_SINGLE([scanned-registry-token],[t],[A registry token for your private registry that scanner needs to pull from],[])

# ARG_OPTIONAL_SINGLE([pcp-container-registry],[c],[Base docker repo for the applicaition.],[gcr.io/gke-verification/blackducksoftware])
# ARG_OPTIONAL_SINGLE([pcp-container-version],[v],[perceptor version],[master])
# ARG_OPTIONAL_SINGLE([pcp-namespace],[n],[The namespace perceptor containers run in.],[hub])

# ARG_OPTIONAL_SINGLE([hub-user],[U],[hub user],[sysadmin])
# ARG_OPTIONAL_SINGLE([hub-password],[W],[hub password],[none])
# ARG_OPTIONAL_SINGLE([hub-host],[H],[hub hostname ],[nginx-webapp-logstash])
# ARG_OPTIONAL_SINGLE([hub-port],[P],[hub port ],[8443])
# ARG_OPTIONAL_SINGLE([hub-max-concurrent-scans],[C],[maximum scans at a time for the hub],[7])

# ARG_OPTIONAL_BOOLEAN([proto-prompt],[i],[prompt for values rather then expecting them all at the command line],[off])

# ARG_OPTIONAL_SINGLE([proto-prometheus-metrics],[],[install a local prometheus metrics scraper inside the namespace for easy monitoring and debugging],[on])

# ARG_OPTIONAL_SINGLE([proto-testing-mode],[],[ (experimental) run prometheus in testing mode with debugging and automated verification that the system is working ],[off])


# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='koptcvnUWHPCih'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_kube_perceiver="on"
_arg_openshift_perceiver="off"
_arg_scanned_registry=
_arg_scanned_registry_token=
_arg_pcp_container_registry="gcr.io/gke-verification/blackducksoftware"
_arg_pcp_container_version="master"
_arg_pcp_namespace="hub"
_arg_hub_user="sysadmin"
_arg_hub_password="none"
_arg_hub_host="nginx-webapp-logstash"
_arg_hub_port="8443"
_arg_hub_max_concurrent_scans="7"
_arg_proto_prompt="off"
_arg_proto_prometheus_metrics="on"
_arg_proto_testing_mode="off"

print_help ()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-k|--(no-)kube-perceiver] [-o|--(no-)openshift-perceiver] [-p|--scanned-registry <arg>] [-t|--scanned-registry-token <arg>] [-c|--pcp-container-registry <arg>] [-v|--pcp-container-version <arg>] [-n|--pcp-namespace <arg>] [-U|--hub-user <arg>] [-W|--hub-password <arg>] [-H|--hub-host <arg>] [-P|--hub-port <arg>] [-C|--hub-max-concurrent-scans <arg>] [-i|--(no-)proto-prompt] [--proto-prometheus-metrics <arg>] [--proto-testing-mode <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-k,--kube-perceiver,--no-kube-perceiver: Wether the kube perceiver is enabled. (on by default)"
	printf '\t%s\n' "-o,--openshift-perceiver,--no-openshift-perceiver: Wether the openshift perceiver is enabled. (off by default)"
	printf '\t%s\n' "-p,--scanned-registry: A registry url you will need to pull from if private registries. (no default)"
	printf '\t%s\n' "-t,--scanned-registry-token: A registry token for your private registry that scanner needs to pull from (no default)"
	printf '\t%s\n' "-c,--pcp-container-registry: Base docker repo for the applicaition. (default: 'gcr.io/gke-verification/blackducksoftware')"
	printf '\t%s\n' "-v,--pcp-container-version: perceptor version (default: 'master')"
	printf '\t%s\n' "-n,--pcp-namespace: The namespace perceptor containers run in. (default: 'hub')"
	printf '\t%s\n' "-U,--hub-user: hub user (default: 'sysadmin')"
	printf '\t%s\n' "-W,--hub-password: hub password (default: 'none')"
	printf '\t%s\n' "-H,--hub-host: hub hostname  (default: 'nginx-webapp-logstash')"
	printf '\t%s\n' "-P,--hub-port: hub port  (default: '8443')"
	printf '\t%s\n' "-C,--hub-max-concurrent-scans: maximum scans at a time for the hub (default: '7')"
	printf '\t%s\n' "-i,--proto-prompt,--no-proto-prompt: prompt for values rather then expecting them all at the command line (off by default)"
	printf '\t%s\n' "--proto-prometheus-metrics: install a local prometheus metrics scraper inside the namespace for easy monitoring and debugging (default: 'on')"
	printf '\t%s\n' "--proto-testing-mode:  (experimental) run prometheus in testing mode with debugging and automated verification that the system is working  (default: 'off')"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-k|--no-kube-perceiver|--kube-perceiver)
				_arg_kube_perceiver="on"
				test "${1:0:5}" = "--no-" && _arg_kube_perceiver="off"
				;;
			-k*)
				_arg_kube_perceiver="on"
				_next="${_key##-k}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-k" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-o|--no-openshift-perceiver|--openshift-perceiver)
				_arg_openshift_perceiver="on"
				test "${1:0:5}" = "--no-" && _arg_openshift_perceiver="off"
				;;
			-o*)
				_arg_openshift_perceiver="on"
				_next="${_key##-o}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-o" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-p|--scanned-registry)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_scanned_registry="$2"
				shift
				;;
			--scanned-registry=*)
				_arg_scanned_registry="${_key##--scanned-registry=}"
				;;
			-p*)
				_arg_scanned_registry="${_key##-p}"
				;;
			-t|--scanned-registry-token)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_scanned_registry_token="$2"
				shift
				;;
			--scanned-registry-token=*)
				_arg_scanned_registry_token="${_key##--scanned-registry-token=}"
				;;
			-t*)
				_arg_scanned_registry_token="${_key##-t}"
				;;
			-c|--pcp-container-registry)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_pcp_container_registry="$2"
				shift
				;;
			--pcp-container-registry=*)
				_arg_pcp_container_registry="${_key##--pcp-container-registry=}"
				;;
			-c*)
				_arg_pcp_container_registry="${_key##-c}"
				;;
			-v|--pcp-container-version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_pcp_container_version="$2"
				shift
				;;
			--pcp-container-version=*)
				_arg_pcp_container_version="${_key##--pcp-container-version=}"
				;;
			-v*)
				_arg_pcp_container_version="${_key##-v}"
				;;
			-n|--pcp-namespace)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_pcp_namespace="$2"
				shift
				;;
			--pcp-namespace=*)
				_arg_pcp_namespace="${_key##--pcp-namespace=}"
				;;
			-n*)
				_arg_pcp_namespace="${_key##-n}"
				;;
			-U|--hub-user)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_hub_user="$2"
				shift
				;;
			--hub-user=*)
				_arg_hub_user="${_key##--hub-user=}"
				;;
			-U*)
				_arg_hub_user="${_key##-U}"
				;;
			-W|--hub-password)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_hub_password="$2"
				shift
				;;
			--hub-password=*)
				_arg_hub_password="${_key##--hub-password=}"
				;;
			-W*)
				_arg_hub_password="${_key##-W}"
				;;
			-H|--hub-host)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_hub_host="$2"
				shift
				;;
			--hub-host=*)
				_arg_hub_host="${_key##--hub-host=}"
				;;
			-H*)
				_arg_hub_host="${_key##-H}"
				;;
			-P|--hub-port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_hub_port="$2"
				shift
				;;
			--hub-port=*)
				_arg_hub_port="${_key##--hub-port=}"
				;;
			-P*)
				_arg_hub_port="${_key##-P}"
				;;
			-C|--hub-max-concurrent-scans)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_hub_max_concurrent_scans="$2"
				shift
				;;
			--hub-max-concurrent-scans=*)
				_arg_hub_max_concurrent_scans="${_key##--hub-max-concurrent-scans=}"
				;;
			-C*)
				_arg_hub_max_concurrent_scans="${_key##-C}"
				;;
			-i|--no-proto-prompt|--proto-prompt)
				_arg_proto_prompt="on"
				test "${1:0:5}" = "--no-" && _arg_proto_prompt="off"
				;;
			-i*)
				_arg_proto_prompt="on"
				_next="${_key##-i}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-i" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			--proto-prometheus-metrics)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_proto_prometheus_metrics="$2"
				shift
				;;
			--proto-prometheus-metrics=*)
				_arg_proto_prometheus_metrics="${_key##--proto-prometheus-metrics=}"
				;;
			--proto-testing-mode)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_proto_testing_mode="$2"
				shift
				;;
			--proto-testing-mode=*)
				_arg_proto_testing_mode="${_key##--proto-testing-mode=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# ] <-- needed because of Argbash
